{"version":3,"file":"react-currency-input.min.js","sources":["../src/mask.js","../src/object-assign-polyfill.js","../src/index.js"],"sourcesContent":["\r\nexport default function mask(value, precision = 2, decimalSeparator = '.', thousandSeparator = ',', allowNegative = false, prefix = '', suffix = ''){\r\n    // provide some default values and arg validation.\r\n    if (precision < 0) { precision = 0; } // precision cannot be negative\r\n    if (precision > 20) { precision = 20; } // precision cannot be greater than 20\r\n    \r\n    if (value === null || value===undefined) {\r\n          return {\r\n              value: 0,\r\n              maskedValue: ''\r\n          };\r\n     }\r\n  \r\n    value = String(value); //if the given value is a Number, let's convert into String to manipulate that\r\n\r\n    if (value.length == 0) {\r\n        return {\r\n            value: 0,\r\n            maskedValue: ''\r\n        };\r\n    }\r\n\r\n\r\n    // extract digits. if no digits, fill in a zero.\r\n    let digits = value.match(/\\d/g) || ['0'];\r\n    \r\n    let numberIsNegative = false;\r\n    if (allowNegative) {\r\n        let negativeSignCount = (value.match(/-/g) || []).length;\r\n        // number will be negative if we have an odd number of \"-\"\r\n        // ideally, we should only ever have 0, 1 or 2 (positive number, making a number negative\r\n        // and making a negative number positive, respectively)\r\n        numberIsNegative = negativeSignCount % 2 === 1;\r\n        \r\n        // if every digit in the array is '0', then the number should never be negative\r\n        let allDigitsAreZero = true;\r\n        for (let idx=0; idx < digits.length; idx += 1) {\r\n            if(digits[idx] !== '0') {\r\n                allDigitsAreZero = false;\r\n                break;\r\n            }\r\n        }\r\n        if (allDigitsAreZero) {\r\n            numberIsNegative = false;\r\n        }\r\n    }\r\n\r\n    // zero-pad a input\r\n    while (digits.length <= precision) { digits.unshift('0'); }\r\n\r\n    if (precision > 0) {\r\n        // add the decimal separator\r\n        digits.splice(digits.length - precision, 0, \".\");\r\n    }\r\n\r\n    // clean up extraneous digits like leading zeros.\r\n    digits = Number(digits.join('')).toFixed(precision).split('');\r\n    let raw = Number(digits.join(''));\r\n\r\n    let decimalpos = digits.length - precision - 1;  // -1 needed to position the decimal separator before the digits.\r\n    if (precision > 0) {\r\n        // set the final decimal separator\r\n        digits[decimalpos] = decimalSeparator;\r\n    } else {\r\n        // when precision is 0, there is no decimal separator.\r\n        decimalpos = digits.length;\r\n    }\r\n\r\n    // add in any thousand separators\r\n    for (let x=decimalpos - 3; x > 0; x = x - 3) {\r\n        digits.splice(x, 0, thousandSeparator);\r\n    }\r\n\r\n    // if we have a prefix or suffix, add them in.\r\n    if (prefix.length > 0) { digits.unshift(prefix); }\r\n    if (suffix.length > 0) { digits.push(suffix); }\r\n\r\n    // if the number is negative, insert a \"-\" to\r\n    // the front of the array and negate the raw value\r\n    if (allowNegative && numberIsNegative) {\r\n        digits.unshift('-');\r\n        raw = -raw;\r\n    }\r\n\r\n    return {\r\n        value: raw,\r\n        maskedValue: digits.join('').trim()\r\n    };\r\n}\r\n","Object.assign = Object.assign ||\r\n  function(target) {\r\n    for (var i = 1; i < arguments.length; i++) {\r\n      var source = arguments[i];\r\n      for (var key in source) {\r\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\r\n          target[key] = source[key];\r\n        }\r\n      }\r\n    }\r\n    return target;\r\n  };\r\n","import './object-assign-polyfill';\r\n\r\nimport PropTypes from 'prop-types';\r\nimport React, { Component }  from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport mask from './mask.js'\r\n\r\n// IE* parseFloat polyfill\r\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/parseFloat#Polyfill\r\nNumber.parseFloat = parseFloat;\r\n\r\nclass CurrencyInput extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.prepareProps = this.prepareProps.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleFocus = this.handleFocus.bind(this);\r\n        this.state = this.prepareProps(this.props);\r\n\r\n        this.inputSelectionStart = 1;\r\n        this.inputSelectionEnd = 1;\r\n    }\r\n\r\n\r\n    /**\r\n     * Exposes the current masked value.\r\n     *\r\n     * @returns {String}\r\n     */\r\n    getMaskedValue() {\r\n        return this.state.maskedValue;\r\n    }\r\n\r\n\r\n    /**\r\n     * General function used to cleanup and define the final props used for rendering\r\n     * @returns {{ maskedValue: {String}, value: {Number}, customProps: {Object} }}\r\n     */\r\n    prepareProps(props) {\r\n        let customProps = {...props}; // babeljs converts to Object.assign, then polyfills.\r\n        delete customProps.onChange;\r\n        delete customProps.onChangeEvent;\r\n        delete customProps.value;\r\n        delete customProps.decimalSeparator;\r\n        delete customProps.thousandSeparator;\r\n        delete customProps.precision;\r\n        delete customProps.inputType;\r\n        delete customProps.allowNegative;\r\n        delete customProps.allowEmpty;\r\n        delete customProps.prefix;\r\n        delete customProps.suffix;\r\n        delete customProps.selectAllOnFocus;\r\n\r\n        let initialValue = props.value;\r\n        if (initialValue === null) {\r\n            initialValue = props.allowEmpty? null : '';\r\n        }else{\r\n\r\n            if (typeof initialValue == 'string') {\r\n                // Some people, when confronted with a problem, think \"I know, I'll use regular expressions.\"\r\n                // Now they have two problems.\r\n\r\n                // Strip out thousand separators, prefix, and suffix, etc.\r\n                if (props.thousandSeparator === \".\"){\r\n                    // special handle the . thousand separator\r\n                    initialValue = initialValue.replace(/\\./g, '');\r\n                }\r\n\r\n                if (props.decimalSeparator != \".\"){\r\n                    // fix the decimal separator\r\n                    initialValue = initialValue.replace(new RegExp(props.decimalSeparator, 'g'), '.');\r\n                }\r\n\r\n                //Strip out anything that is not a digit, -, or decimal separator\r\n                initialValue = initialValue.replace(/[^0-9-.]/g, '');\r\n\r\n                // now we can parse.\r\n                initialValue = Number.parseFloat(initialValue);\r\n            }\r\n            initialValue = Number(initialValue).toLocaleString(undefined, {\r\n                style                : 'decimal',\r\n                minimumFractionDigits: props.precision,\r\n                maximumFractionDigits: props.precision\r\n            })\r\n\r\n        }\r\n\r\n        const { maskedValue, value } = mask(\r\n            initialValue,\r\n            props.precision,\r\n            props.decimalSeparator,\r\n            props.thousandSeparator,\r\n            props.allowNegative,\r\n            props.prefix,\r\n            props.suffix\r\n        );\r\n\r\n        return { maskedValue, value, customProps };\r\n    }\r\n\r\n\r\n    /**\r\n     * Component lifecycle function.\r\n     * Invoked when a component is receiving new props. This method is not called for the initial render.\r\n     *\r\n     * @param nextProps\r\n     * @see https://facebook.github.io/react/docs/component-specs.html#updating-componentwillreceiveprops\r\n     */\r\n    componentWillReceiveProps(nextProps) {\r\n        this.setState(this.prepareProps(nextProps));\r\n    }\r\n\r\n\r\n    /**\r\n     * Component lifecycle function.\r\n     * @returns {XML}\r\n     * @see https://facebook.github.io/react/docs/react-component.html#componentdidmount\r\n     */\r\n    componentDidMount(){\r\n        let node = ReactDOM.findDOMNode(this.theInput);\r\n\r\n        let selectionEnd = Math.min(node.selectionEnd, this.theInput.value.length - this.props.suffix.length);\r\n        let selectionStart = Math.min(node.selectionStart, selectionEnd);\r\n        //console.log(\"normal\", selectionStart, selectionEnd);\r\n        node.setSelectionRange(selectionStart, selectionEnd);\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * Component lifecycle function\r\n     * @returns {XML}\r\n     * @see https://facebook.github.io/react/docs/react-component.html#componentwillupdate\r\n     */\r\n    componentWillUpdate() {\r\n        let node = ReactDOM.findDOMNode(this.theInput);\r\n        this.inputSelectionStart = node.selectionStart;\r\n        this.inputSelectionEnd = node.selectionEnd;\r\n    }\r\n\r\n\r\n    /**\r\n     * Component lifecycle function.\r\n     * @returns {XML}\r\n     * @see https://facebook.github.io/react/docs/react-component.html#componentdidupdate\r\n     */\r\n    componentDidUpdate(prevProps, prevState){\r\n\r\n        let node = ReactDOM.findDOMNode(this.theInput);\r\n        let isNegative = (this.theInput.value.match(/-/g) || []).length % 2 === 1;\r\n        let minPos = this.props.prefix.length + (isNegative ? 1 : 0);\r\n        let selectionEnd = Math.max(minPos, Math.min(this.inputSelectionEnd, this.theInput.value.length - this.props.suffix.length));\r\n        let selectionStart = Math.max(minPos, Math.min(this.inputSelectionEnd, selectionEnd));\r\n\r\n        let regexEscapeRegex = /[-[\\]{}()*+?.,\\\\^$|#\\s]/g;\r\n        let separatorsRegex = new RegExp(this.props.decimalSeparator.replace(regexEscapeRegex, '\\\\$&') + '|' + this.props.thousandSeparator.replace(regexEscapeRegex, '\\\\$&'), 'g');\r\n        let currSeparatorCount = (this.state.maskedValue.match(separatorsRegex) || []).length;\r\n        let prevSeparatorCount = (prevState.maskedValue.match(separatorsRegex) || []).length;\r\n        let adjustment = Math.max(currSeparatorCount - prevSeparatorCount, 0);\r\n\r\n        selectionEnd = selectionEnd + adjustment;\r\n        selectionStart = selectionStart + adjustment;\r\n\r\n        let baselength = this.props.suffix.length\r\n            + this.props.prefix.length\r\n            + this.props.decimalSeparator.length\r\n            + Number(this.props.precision)\r\n            + 1; // This is to account for the default '0' value that comes before the decimal separator\r\n\r\n        if (this.state.maskedValue.length == baselength){\r\n            // if we are already at base length, position the cursor at the end.\r\n            selectionEnd = this.theInput.value.length - this.props.suffix.length;\r\n            selectionStart = selectionEnd;\r\n        }\r\n\r\n        node.setSelectionRange(selectionStart, selectionEnd);\r\n        this.inputSelectionStart = selectionStart;\r\n        this.inputSelectionEnd = selectionEnd;\r\n    }\r\n\r\n\r\n    /**\r\n     * onChange Event Handler\r\n     * @param event\r\n     */\r\n    handleChange(event) {\r\n        event.preventDefault();\r\n        let { maskedValue, value } = mask(\r\n            event.target.value,\r\n            this.props.precision,\r\n            this.props.decimalSeparator,\r\n            this.props.thousandSeparator,\r\n            this.props.allowNegative,\r\n            this.props.prefix,\r\n            this.props.suffix\r\n        );\r\n\r\n        event.persist();  // fixes issue #23\r\n\r\n        this.setState({ maskedValue, value }, () => {\r\n            this.props.onChange(maskedValue, value, event);\r\n            this.props.onChangeEvent(event, maskedValue, value);\r\n        });\r\n    }\r\n\r\n\r\n    /**\r\n     * onFocus Event Handler\r\n     * @param event\r\n     */\r\n    handleFocus(event) {\r\n        if (!this.theInput) return;\r\n\r\n        //Whenever we receive focus check to see if the position is before the suffix, if not, move it.\r\n        let selectionEnd = this.theInput.value.length - this.props.suffix.length;\r\n        let isNegative = (this.theInput.value.match(/-/g) || []).length % 2 === 1;\r\n        let selectionStart = this.props.prefix.length + (isNegative ? 1 : 0);\r\n        this.props.selectAllOnFocus && event.target.setSelectionRange(selectionStart, selectionEnd);\r\n        this.inputSelectionStart = selectionStart;\r\n        this.inputSelectionEnd = selectionEnd;\r\n    }\r\n\r\n\r\n    handleBlur(event) {\r\n        this.inputSelectionStart = 0;\r\n        this.inputSelectionEnd = 0;\r\n    }\r\n\r\n\r\n    /**\r\n     * Component lifecycle function.\r\n     * @returns {XML}\r\n     * @see https://facebook.github.io/react/docs/component-specs.html#render\r\n     */\r\n    render() {\r\n        return (\r\n            <input\r\n                ref={(input) => { this.theInput = input; }}\r\n                type={this.props.inputType}\r\n                value={this.state.maskedValue}\r\n                onChange={this.handleChange}\r\n                onFocus={this.handleFocus}\r\n                onMouseUp={this.handleFocus}\r\n                {...this.state.customProps}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\n/**\r\n * Prop validation.\r\n * @see https://facebook.github.io/react/docs/component-specs.html#proptypes\r\n */\r\n\r\nCurrencyInput.propTypes = {\r\n    onChange: PropTypes.func,\r\n    value: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\r\n    decimalSeparator: PropTypes.string,\r\n    thousandSeparator: PropTypes.string,\r\n    precision: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\r\n    inputType: PropTypes.string,\r\n    allowNegative: PropTypes.bool,\r\n    allowEmpty: PropTypes.bool,\r\n    prefix: PropTypes.string,\r\n    suffix: PropTypes.string,\r\n    selectAllOnFocus: PropTypes.bool\r\n};\r\n\r\n\r\nCurrencyInput.defaultProps = {\r\n    onChange: function(maskValue, value, event) {/*no-op*/},\r\n    onChangeEvent: function(event, maskValue, value) {/*no-op*/},\r\n    value: '0',\r\n    decimalSeparator: '.',\r\n    thousandSeparator: ',',\r\n    precision: '2',\r\n    inputType: 'text',\r\n    allowNegative: false,\r\n    prefix: '',\r\n    suffix: '',\r\n    selectAllOnFocus: false\r\n};\r\n\r\n\r\nexport default CurrencyInput\r\n"],"names":["mask","value","precision","decimalSeparator","thousandSeparator","allowNegative","prefix","suffix","undefined","maskedValue","String","length","let","digits","match","numberIsNegative","allDigitsAreZero","idx","unshift","splice","Number","join","toFixed","split","raw","decimalpos","x","push","trim","Object","assign","target","i","arguments","source","key","prototype","hasOwnProperty","call","parseFloat","CurrencyInput","props","super","this","prepareProps","bind","handleChange","handleFocus","state","inputSelectionStart","inputSelectionEnd","getMaskedValue","customProps","onChange","onChangeEvent","inputType","allowEmpty","selectAllOnFocus","initialValue","replace","RegExp","toLocaleString","style","minimumFractionDigits","maximumFractionDigits","componentWillReceiveProps","nextProps","setState","componentDidMount","node","ReactDOM","findDOMNode","theInput","selectionEnd","Math","min","selectionStart","setSelectionRange","componentWillUpdate","componentDidUpdate","prevProps","prevState","isNegative","minPos","max","regexEscapeRegex","separatorsRegex","currSeparatorCount","prevSeparatorCount","adjustment","baselength","event","preventDefault","persist","handleBlur","render","React","ref","input","type","onFocus","onMouseUp","Component","propTypes","PropTypes","func","oneOfType","number","string","bool","defaultProps","maskValue"],"mappings":"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"}